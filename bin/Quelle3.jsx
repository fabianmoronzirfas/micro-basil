var glob = this;(function (Function) {    var        isFunction = function (type) {            return (                (typeof type == "function")                && (typeof type.call == "function")                && (typeof type.apply == "function")            );        },        getSanitizedTarget = function (target) {            //return (target == null) ? null : target;            return ((target != null) && target) || null;        };    Function.prototype.before = function (handler, target) { // before        target  = getSanitizedTarget(target);        var proceed = this ;        return (isFunction(handler) && isFunction(proceed) && function () {            var args = arguments;            //handler.apply(target, args);            handler.call(target, args);            return proceed.apply(target, args);        }) || proceed;    };}(Function));var    obj = {        foo: function() {            console.log('foo');        },        bah: function() {            console.log('bah');        }    };function fn1() {  foo();  bah();    console.log('fn1');}function fn2() {    bah();    console.log('fn2');}function main() {  //fn1.add(obj.foo); // <= Should add function foo to fn1  //fn2.add(obj.bah); // <= Should add function bah to fn2    glob.fn1 = glob.fn1.before(obj.foo);    glob.fn2 = glob.fn2.before(obj.bah);    fn1(); // Should output: foo and then fn1    fn2(); // should output: bah and then fn2  //obj.foo = obj.foo.after(f1);  //obj.bah = obj.bah.after(f2);}main();